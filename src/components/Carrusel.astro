---
import {
  siHtml5, siCss, siSass, siBootstrap, siTailwindcss,
  siJavascript, siTypescript, siAngular, siFigma,
  siMysql, siPostgresql, siPhp, siOpenjdk,
  siSpring, siSpringboot, siDocker, siGit, siGithub
} from "simple-icons";

const FRONTEND = [siHtml5, siCss, siSass, siBootstrap, siTailwindcss, siJavascript, siTypescript, siAngular, siFigma];
const BACKEND = [siMysql, siPostgresql, siPhp, siOpenjdk, siSpring, siSpringboot, siDocker, siGit, siGithub];

const ICON_SIZE  = "w-16 h-16 sm:w-18 sm:h-18 md:w-20 md:h-20";
const ICON_COLOR = "text-[#c9e8ff]/90";
---
<div class="min-h-screen flex flex-col justify-center py-24" id="tecnologias">
  <h1 class="flex justify-center items-center text-5xl text-center md:text-[2.7rem] font-bold text-[#c9e8ff] mb-10 md:mb-14">
    Expositor de tecnolog√≠as
  </h1>

  <section class="py-8">
    <div class="relative max-w-7xl mx-auto px-6">
      <div
        class="relative rounded-3xl border-[2px] backdrop-blur-2xl overflow-hidden
               border-[#c9e8ff]/40 bg-[#c9e8ff]/10
               shadow-[0_0_0_1px_rgba(201,232,255,0.25),0_10px_30px_rgba(201,232,255,0.08)]"
        style="background-image:
          radial-gradient(1000px 200px at -10% -10%, rgba(201,232,255,.18), transparent),
          radial-gradient(800px 200px at 110% 110%, rgba(201,232,255,.12), transparent);"
      >
        <div class="pointer-events-none absolute -top-24 -left-24 h-64 w-64 rounded-full bg-[#c9e8ff]/15 blur-3xl"></div>
        <div class="pointer-events-none absolute -bottom-24 -right-24 h-64 w-64 rounded-full bg-[#c9e8ff]/10 blur-3xl"></div>

        <div class="px-6 py-10">
          <div
            class="relative overflow-hidden
                   [mask-image:linear-gradient(to_right,transparent,black_80px,black_calc(100%-80px),transparent)]
                   [-webkit-mask-image:linear-gradient(to_right,transparent,black_80px,black_calc(100%-80px),transparent)]
                   sm:[mask-image:linear-gradient(to_right,transparent,black_112px,black_calc(100%-112px),transparent)]
                   sm:[-webkit-mask-image:linear-gradient(to_right,transparent,black_112px,black_calc(100%-112px),transparent)]"
          >
            <div class="space-y-32">
              <div class="overflow-hidden" data-marquee data-direction="left" data-speed="50">
                <div data-track class="flex items-center will-change-transform">
                  <ul data-segment class="flex items-center gap-14 sm:gap-x-16 pr-14 sm:pr-16">
                    {FRONTEND.map((i) => (
                      <li class="shrink-0">
                        <svg viewBox="0 0 24 24" class={`${ICON_SIZE} ${ICON_COLOR}`} aria-hidden>
                          <path d={i.path} fill="currentColor" />
                        </svg>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>

              <div class="overflow-hidden" data-marquee data-direction="right" data-speed="50">
                <div data-track class="flex items-center will-change-transform">
                  <ul data-segment class="flex items-center gap-14 sm:gap-x-16 pr-14 sm:pr-16">
                    {BACKEND.map((i) => (
                      <li class="shrink-0">
                        <svg viewBox="0 0 24 24" class={`${ICON_SIZE} ${ICON_COLOR}`} aria-hidden>
                          <path d={i.path} fill="currentColor" />
                        </svg>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script is:inline>
      // (tu marquee sin cambios)
      document.addEventListener('DOMContentLoaded', () => {
        function setupMarquee(m) {
          const track = m.querySelector('[data-track]');
          const baseSeg = m.querySelector('[data-segment]');
          const toRight = m.dataset.direction === 'right';
          const speed = Number(m.dataset.speed || 70);
          let anim = null;

          const build = () => {
            track.innerHTML = '';
            const seg = baseSeg.cloneNode(true);
            track.appendChild(seg);

            requestAnimationFrame(() => {
              const vw = m.clientWidth;
              const sw = seg.scrollWidth;

              let total = sw;
              while (total < vw + sw) {
                const clone = seg.cloneNode(true);
                clone.setAttribute('aria-hidden', 'true');
                track.appendChild(clone);
                total += sw;
              }

              if (anim) anim.cancel();

              const distance = sw;
              const duration = (distance / speed) * 1000;

              track.style.transform = toRight ? `translateX(${-distance}px)` : `translateX(0)`;

              anim = track.animate(
                toRight
                  ? [{ transform: `translateX(${-distance}px)` }, { transform: `translateX(0)` }]
                  : [{ transform: `translateX(0)` }, { transform: `translateX(${-distance}px)` }],
                { duration, easing: 'linear', iterations: Infinity }
              );
            });
          };

          build();

          let t;
          window.addEventListener('resize', () => {
            clearTimeout(t);
            t = setTimeout(build, 150);
          });
        }

        document.querySelectorAll('[data-marquee]').forEach(setupMarquee);
      });
    </script>
  </section>
</div>
